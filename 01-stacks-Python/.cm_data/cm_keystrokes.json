{
    "stacks.py": [
        {
            "operation": "DELETE",
            "lines": 37,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 15:48:07",
            "keyStrokeInfo": "",
            "position": "9,1"
        },
        {
            "operation": "PASTE",
            "lines": 43,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 15:48:09",
            "keyStrokeInfo": "class Element(object):\r\n    def _init_(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def _init_(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        current = self.head\r\n        if self.head:\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_element\r\n        else:\r\n            self.head = new_element\r\n\r\n    def insert_first(self, new_element):\r\n        \"Insert new element as the head of the LinkedList\"\r\n        new_element.next=self.head\r\n        self.head=new_element\r\n\r\n\r\n    def delete_first(self):\r\n        \"Delete the first (head) element in the LinkedList as return it\"\r\n        a=self.head\r\n        if(self.head):\r\n            self.head=self.head.next\r\n            a.next=None\r\n        return a\r\n\r\nclass stack(object):\r\n    def _init_(self,top=None):\r\n        self.ll = LinkedList(top)\r\n\r\n    def push(self, new_element):\r\n        \"Push (add) a new element onto the top of the stack\"\r\n        self.ll.insert_first(new_element)\r\n\r\n    def pop(self):\r\n        \"Pop (remove) the first element off the top of the stack and return it\"\r\n        return self.ll.delete_first()",
            "position": "9,1"
        },
        {
            "operation": "DELETE",
            "lines": 42,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:00",
            "keyStrokeInfo": "",
            "position": "9,1"
        },
        {
            "operation": "PASTE",
            "lines": 37,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:01",
            "keyStrokeInfo": "class Element(object):\r\n    def __init__(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def __init__(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        current = self.head\r\n        if self.head:\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_element\r\n        else:\r\n            self.head = new_element\r\n\r\n    def insert_first(self, new_element):\r\n        \"Insert new element as the head of the LinkedList\"\r\n        pass\r\n\r\n    def delete_first(self):\r\n        \"Delete the first (head) element in the LinkedList as return it\"\r\n        pass\r\n\r\nclass stack(object):\r\n    def __init__(self,top=None):\r\n        self.ll = LinkedList(top)\r\n\r\n    def push(self, new_element):\r\n        \"Push (add) a new element onto the top of the stack\"\r\n        pass\r\n\r\n    def pop(self):\r\n        \"Pop (remove) the first element off the top of the stack and return it\"\r\n        pass\r\n    ",
            "position": "9,1"
        },
        {
            "operation": "DELETE",
            "lines": 38,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:10",
            "keyStrokeInfo": "",
            "position": "8,1"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:10",
            "keyStrokeInfo": "",
            "position": "7,36"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:12",
            "keyStrokeInfo": "",
            "position": "6,42"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:12",
            "keyStrokeInfo": "",
            "position": "5,44"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:15",
            "keyStrokeInfo": "",
            "position": "4,43"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:15",
            "keyStrokeInfo": "",
            "position": "3,39"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:15",
            "keyStrokeInfo": "",
            "position": "2,35"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:18",
            "keyStrokeInfo": "",
            "position": "1,49"
        },
        {
            "operation": "DELETE",
            "lines": 0,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:19",
            "keyStrokeInfo": "",
            "position": "1,1"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:21",
            "keyStrokeInfo": "\"\"\"Add a couple methods to our LinkedList class,",
            "position": "1,1"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:21",
            "keyStrokeInfo": "\r\nand use that to implement a Stack.",
            "position": "1,49"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:22",
            "keyStrokeInfo": "\r\nYou have 4 functions below to fill in:",
            "position": "2,35"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:22",
            "keyStrokeInfo": "\r\ninsert_first, delete_first, push, and pop.",
            "position": "3,39"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:22",
            "keyStrokeInfo": "\r\nThink about this while you're implementing:",
            "position": "4,43"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:23",
            "keyStrokeInfo": "\r\nwhy is it easier to add an \"insert_first\"",
            "position": "5,44"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:23",
            "keyStrokeInfo": "\r\nfunction than just use \"append\"?\"\"\"",
            "position": "6,42"
        },
        {
            "operation": "TYPED",
            "lines": 0,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:23",
            "keyStrokeInfo": "\r\n",
            "position": "7,36"
        },
        {
            "operation": "PASTE",
            "lines": 37,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:08:24",
            "keyStrokeInfo": "\r\nclass Element(object):\r\n    def __init__(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def __init__(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        current = self.head\r\n        if self.head:\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_element\r\n        else:\r\n            self.head = new_element\r\n\r\n    def insert_first(self, new_element):\r\n        \"Insert new element as the head of the LinkedList\"\r\n        pass\r\n\r\n    def delete_first(self):\r\n        \"Delete the first (head) element in the LinkedList as return it\"\r\n        pass\r\n\r\nclass stack(object):\r\n    def __init__(self,top=None):\r\n        self.ll = LinkedList(top)\r\n\r\n    def push(self, new_element):\r\n        \"Push (add) a new element onto the top of the stack\"\r\n        pass\r\n\r\n    def pop(self):\r\n        \"Pop (remove) the first element off the top of the stack and return it\"\r\n        pass\r\n    ",
            "position": "8,1"
        },
        {
            "operation": "DELETE",
            "lines": 30,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:09:33",
            "keyStrokeInfo": "",
            "position": "15,1"
        },
        {
            "operation": "PASTE",
            "lines": 43,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:09:35",
            "keyStrokeInfo": "class Element(object):\r\n    def _init_(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def _init_(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        current = self.head\r\n        if self.head:\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_element\r\n        else:\r\n            self.head = new_element\r\n\r\n    def insert_first(self, new_element):\r\n        \"Insert new element as the head of the LinkedList\"\r\n        new_element.next=self.head\r\n        self.head=new_element\r\n\r\n\r\n    def delete_first(self):\r\n        \"Delete the first (head) element in the LinkedList as return it\"\r\n        a=self.head\r\n        if(self.head):\r\n            self.head=self.head.next\r\n            a.next=None\r\n        return a\r\n\r\nclass stack(object):\r\n    def _init_(self,top=None):\r\n        self.ll = LinkedList(top)\r\n\r\n    def push(self, new_element):\r\n        \"Push (add) a new element onto the top of the stack\"\r\n        self.ll.insert_first(new_element)\r\n\r\n    def pop(self):\r\n        \"Pop (remove) the first element off the top of the stack and return it\"\r\n        return self.ll.delete_first()",
            "position": "15,1"
        },
        {
            "operation": "DELETE",
            "lines": 5,
            "keyStrokeTimeStamp": "Fri Jul 16 2021 16:09:57",
            "keyStrokeInfo": "",
            "position": "9,1"
        },
        {
            "operation": "DELETE",
            "lines": 43,
            "keyStrokeTimeStamp": "Mon Jul 19 2021 17:50:15",
            "keyStrokeInfo": "",
            "position": "10,1"
        },
        {
            "operation": "PASTE",
            "lines": 43,
            "keyStrokeTimeStamp": "Mon Jul 19 2021 17:50:16",
            "keyStrokeInfo": "class Element(object):\r\n    def _init_(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def _init_(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        current = self.head\r\n        if self.head:\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_element\r\n        else:\r\n            self.head = new_element\r\n\r\n    def insert_first(self, new_element):\r\n        \"Insert new element as the head of the LinkedList\"\r\n        new_element.next=self.head\r\n        self.head=new_element\r\n\r\n\r\n    def delete_first(self):\r\n        \"Delete the first (head) element in the LinkedList as return it\"\r\n        a=self.head\r\n        if(self.head):\r\n            self.head=self.head.next\r\n            a.next=None\r\n        return a\r\n\r\nclass stack(object):\r\n    def _init_(self,top=None):\r\n        self.ll = LinkedList(top)\r\n\r\n    def push(self, new_element):\r\n        \"Push (add) a new element onto the top of the stack\"\r\n        self.ll.insert_first(new_element)\r\n\r\n    def pop(self):\r\n        \"Pop (remove) the first element off the top of the stack and return it\"\r\n        return self.ll.delete_first()",
            "position": "10,1"
        },
        {
            "operation": "PASTE",
            "lines": 37,
            "keyStrokeTimeStamp": "Mon Jul 19 2021 17:51:51",
            "keyStrokeInfo": "\r\nclass Element(object):\r\n    def __init__(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def __init__(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        current = self.head\r\n        if self.head:\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_element\r\n        else:\r\n            self.head = new_element\r\n\r\n    def insert_first(self, new_element):\r\n        \"Insert new element as the head of the LinkedList\"\r\n        pass\r\n\r\n    def delete_first(self):\r\n        \"Delete the first (head) element in the LinkedList as return it\"\r\n        pass\r\n\r\nclass stack(object):\r\n    def __init__(self,top=None):\r\n        self.ll = LinkedList(top)\r\n\r\n    def push(self, new_element):\r\n        \"Push (add) a new element onto the top of the stack\"\r\n        pass\r\n\r\n    def pop(self):\r\n        \"Pop (remove) the first element off the top of the stack and return it\"\r\n        pass\r\n    ",
            "position": "8,1"
        }
    ]
}